% Figure 2.14   A program for the monkey and banana problem.

% move( State1, Move, State2): making Move in State1 results in State2;
%    a state is represented by a term:
%    state( MonkeyHorizontal, MonkeyVertical, BoxPosition, HasBanana)

move( state( middle, onbox, middle, hasnot),   % Before move
      grasp,                                   % Grasp banana
      state( middle, onbox, middle, has) ).    % After move 

move( state( P, onfloor, P, H),
      climb,                                   % Climb box
      state( P, onbox, P, H) ). 

move( state( P1, onfloor, P1, H),
      push( P1, P2),                           % Push box from P1 to P2
      state( P2, onfloor, P2, H) ). 

move( state( P1, onfloor, B, H),
      walk( P1, P2),                           % Walk from P1 to P2
      state( P2, onfloor, B, H) ).                   

% canget( State): monkey can get banana in State

canget( state( _, _, _, has) ).       % can 1: Monkey already has it 

canget( State1)  :-                   % can 2: Do some work to get it
  move( State1, Move, State2),        % Do something
  canget( State2).                    % Get it now


trace:

{trace}
| ?- canget(state(atdoor,onfloor,atwindow,hasnot)).
        
1      1 Call: canget(state(atdoor,onfloor,atwindow,hasnot)) ? 
        
2      2 Call: move(state(atdoor,onfloor,atwindow,hasnot),_682,_686) ? 
        
2      2 Exit: move(state(atdoor,onfloor,atwindow,hasnot),walk(atdoor,_1041),state(_1041,onfloor,atwindow,hasnot)) ? 
        
3      2 Call: canget(state(_1041,onfloor,atwindow,hasnot)) ? 
        
4      3 Call: move(state(_1041,onfloor,atwindow,hasnot),_1752,_1756) ? 
?       
4      3 Exit: move(state(atwindow,onfloor,atwindow,hasnot),climb,state(atwindow,onbox,atwindow,hasnot)) ? 
        
5      3 Call: canget(state(atwindow,onbox,atwindow,hasnot)) ? 
        
6      4 Call: move(state(atwindow,onbox,atwindow,hasnot),_2817,_2821) ? 
        
6      4 Fail: move(state(atwindow,onbox,atwindow,hasnot),_2817,_2821) ? 
        
5      3 Fail: canget(state(atwindow,onbox,atwindow,hasnot)) ? 
        
4      3 Redo: move(state(atwindow,onfloor,atwindow,hasnot),climb,state(atwindow,onbox,atwindow,hasnot)) ? 
?       
4      3 Exit: move(state(atwindow,onfloor,atwindow,hasnot),push(atwindow,_2111),state(_2111,onfloor,_2111,hasnot)) ? 
        
7      3 Call: canget(state(_2111,onfloor,_2111,hasnot)) ? 
        
8      4 Call: move(state(_2111,onfloor,_2111,hasnot),_2825,_2829) ? 
?       
8      4 Exit: move(state(_2111,onfloor,_2111,hasnot),climb,state(_2111,onbox,_2111,hasnot)) ? 
        
9      4 Call: canget(state(_2111,onbox,_2111,hasnot)) ? 
       
10     5 Call: move(state(_2111,onbox,_2111,hasnot),_3890,_3894) ? 
?      
10     5 Exit: move(state(middle,onbox,middle,hasnot),grasp,state(middle,onbox,middle,has)) ? 
       
11     5 Call: canget(state(middle,onbox,middle,has)) ? 
?      
11     5 Exit: canget(state(middle,onbox,middle,has)) ? 
?       
9      4 Exit: canget(state(middle,onbox,middle,hasnot)) ? 
?       
7      3 Exit: canget(state(middle,onfloor,middle,hasnot)) ? 
?       
3      2 Exit: canget(state(atwindow,onfloor,atwindow,hasnot)) ? 
?       
1      1 Exit: canget(state(atdoor,onfloor,atwindow,hasnot)) ? 


yes
{trace}
